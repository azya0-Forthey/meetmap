version: '3.9'

name: meetmap

services:
  frontend:
    container_name: frontend
    build:
      dockerfile: ./dockerfiles/frontend/Dockerfile
      context: .
    environment:
      - PORT=${REACT_CLIENT_PORT}
    restart: always
    ports:
      - ${REACT_CLIENT_PORT}:${REACT_CLIENT_PORT}

  postgres:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      - POSTGRES_DB=${pg_name}
      - POSTGRES_USER=${pg_user}
      - POSTGRES_PASSWORD=${pg_password}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${pg_user}'"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data

  server:
    container_name: server
    build:
      dockerfile: ../dockerfiles/server/Dockerfile
      context: backend
    restart: always
    environment:
      - PORT=${SERVER_PORT}
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      postgres:
        condition: service_healthy

  adminer:
    image: adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "${ADMINER_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy

  migrate_tables:
    container_name: migrate_tables
    restart: no
    build:
      dockerfile: ../dockerfiles/migrate_tables/Dockerfile
      context: backend
    depends_on:
      postgres:
        condition: service_healthy

  create_revision:
    container_name: create_revision
    restart: no
    build:
      dockerfile: ../dockerfiles/create_revision/Dockerfile
      context: backend
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/server/source/database/migrations/versions:/server/source/database/migrations/versions

volumes:
  pg_data: